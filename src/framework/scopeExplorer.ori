<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>{{ @path }}</title>
    <style>
      * {
        box-sizing: border-box;
      }

      html {
        height: 100%;
      }

      body {
        background: #333;
        color: #eee;
        display: grid;
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        font-size: 13px;
        grid-template-columns: 200px 1fr;
        grid-template-rows: minMax(0, 1fr);
        height: 100%;
        margin: 0;
        overflow: hidden;
      }

      nav {
        display: grid;
        gap: 1em;
        grid-auto-rows: min-content;
        grid-template-columns: minmax(0, 1fr);
        overflow: auto;
        padding: 1em 0.5em;
      }

      #label {
        font-weight: bold;
      }

      #scopeToolbar {
        display: grid;
        grid-template-columns: repeat(4, auto);        
      }

      button {
        background: transparent;
        border: solid 1px #555;
        color: inherit;
        font-size: smaller;
        font-family: inherit;
        font-weight: inherit;
        padding: 0.25em;
      }
      button:hover {
        border-color: #999;
      }
      button:active {
        border-color: #eee;
      }
      button[aria-pressed="true"] {
        background: #555;
      }

      ul {
        list-style: none;
        margin: 0;
        padding: 0;
      }

      li {
        padding: 0.25em;
        padding-left: 1em;
        text-indent: -0.75em;
      }

      a {
        color: inherit;
        text-decoration: none;
      }

      .formula {
        color: #999;
      }

      iframe {
        background: white;
        border: none;
        height: 100%;
        width: 100%;
      }
    </style>
    <script>
      let defaultPath;
      let path;
      let frame;

      const modes = {
        Content: "",
        Index: ".index",
        YAML: ".yaml",
        SVG: ".svg",
      };

      // Extract the path from the URL hash.
      function getPathFromHash() {
        const match = /#.*path=(?<path>[^&]*)/.exec(window.location.hash);
        return match?.groups?.path;
      }

      function getModeFromLocation() {
        const href = document.location.href;
        const match = /[\/](?<extension>\.(?:index|yaml|svg))$/.exec(href);
        const extension = match?.groups.extension ?? "";
        const mode = Object.keys(modes).find(key => modes[key] === extension) ?? "Content";
        return mode;
      }

      function removeDocumentPath(path) {
        const documentPath = document.location.pathname;
        if (path.startsWith(documentPath)) {
          // Remove the document path prefix.
          path = path.slice(documentPath.length);
        }
        if (path.startsWith("/")) {
          // Remove the leading slash.
          path = path.slice(1);
        }
        return path;
      }

      function selectMode(newMode) {
        const currentMode = getModeFromLocation();
        if (newMode !== currentMode) {
          let newPath = removeDocumentPath(frame.contentDocument.location.pathname);
          const currentExtension = modes[currentMode];
          if (currentExtension && newPath.endsWith(currentExtension)) {
            // Remove the current extension.
            newPath = newPath.slice(0, -currentExtension.length);
          }
          const newExtension = modes[newMode];
          const newFullPath = `${newPath}${newExtension}`;
          setPath(newFullPath);
        }
      }

      function setPath(path) {
        currentPath = path;

        // Show the indicated page in the frame.
        const abbreviatedPath = `/${path}`;
        const fullPath = `${document.location.pathname}/${path}`;
        const framePathname = frame.contentDocument.location.pathname;
        if (framePathname !== abbreviatedPath && framePathname !== fullPath) {
          // Use `replace` to avoid affecting browser history.
          frame.contentWindow.location.replace(fullPath);
        }

        // If the path ends with a file name corresponding to a mode, select
        // the corresponding mode button.
        const mode = getModeFromLocation();
        const selectedButtonId = `button${mode}`;
        scopeToolbar.querySelectorAll("button").forEach(button => {
          const pressed = button.id === selectedButtonId ? "true" : "false";
          button.setAttribute("aria-pressed", pressed);
        });
      }

      // When hash changes, load the indicated page.
      window.addEventListener("hashchange", () => {
        const hashPath = getPathFromHash();
        const newPath = hashPath !== undefined ? hashPath : defaultPath;
        if (newPath) {
          setPath(newPath);
        }
      });

      // Initialize
      window.addEventListener("load", () => {
        // Refresh title on page load.
        frame = document.getElementById("frame");
        frame.addEventListener("load", () => {
          if (frame.contentDocument.location.href !== "about:blank") {
            document.title = frame.contentDocument.title;
            const newPath = removeDocumentPath(frame.contentDocument.location.pathname);
            const hash = `#path=${newPath}`;
            if (window.location.hash !== hash) {
              // Use `replace` to avoid affecting browser history.
              window.location.replace(hash);
            }
          }
        });

        buttonContent.addEventListener("click", () => {
          selectMode("Content");
        });
        buttonIndex.addEventListener("click", () => {
          selectMode("Index");
        });
        buttonYAML.addEventListener("click", () => {
          selectMode("YAML");
        });
        buttonSVG.addEventListener("click", () => {
          selectMode("SVG");
        });

        // Navigate to any path already in the hash.
        defaultPath = getPathFromHash();
        if (defaultPath) {
          setPath(defaultPath);
        }
      })
    </script>
  </head>
  <body>
    <nav>
    <div id="label">Origami Scope Explorer</div>
    <div id="scopeToolbar">
      <button id="buttonContent">Content</button>
      <button id="buttonIndex">Index</button>
      <button id="buttonYAML">YAML</button>
      <button id="buttonSVG">SVG</button>
    </div>
    {{map @input, =`
      <ul>
      {{map @value, =`
        <li>
          <a href=".scope/{{./text}}" target="frame">{{./text}}</a>
          {{if ./formula, =`
          <span class="formula">= {{./formula}}</span>
          `}}
        </li>
      `}}
      </ul>
    `}}
    </nav>
    <iframe id="frame" name="frame"></iframe>
  </body>
</html>
