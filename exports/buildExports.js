import concat from "../src/builtins/@graph/concat.js";
import MapExtensionGraph from "../src/common/MapExtensionsGraph.js";
import { transformObject } from "../src/core/utilities.js";
import PathTransform from "./PathTransform.js";

const prologue = `// This file is generated by running buildExports.js -- do not edit by hand.\n`;

// For builtins that should not be exported
const ignoredBuiltins = {
  "@false": true,
  "@new": true,
  "@true": true,
};

// Generate a top-level export file for the entire project. For each .js file in
// the given source tree, generate an appropriate statement that includes that
// file's export(s) in the top-level export file.
export async function exportFile(src) {
  const statements = await exportStatements(src);
  // Do a deep traversal of the tree to concatenate all the export statements.
  const text = await concat.call(this, statements);
  return prologue + text;
}

// Given a buffer containing the code for a JavaScript file, generate an
// appropriate export statement for that file.
async function exportStatementForCode(codeBuffer, key) {
  const code = String(codeBuffer);

  const exportsAnything = code.match(/^export /m);
  if (!exportsAnything) {
    // Has no exports
    return "";
  }

  const container = (await this.get("@path")) ?? "";
  // Skip loaders
  if (container === "loaders") {
    return "";
  }
  const path = `${container}/${key}`;

  const exportsDefault = code.match(/^export default /m);
  if (!exportsDefault) {
    // Export everything.
    return `export * from "../src/${path}";\n`;
  }

  // Export a single default export.

  // We construct an identifier for the export based on the path to the file and
  // the file name. This omits the first part of the path, which is the name of
  // a folder that's a direct child of the `src` folder. The remaining parts are
  // joined in camelCase to form the export name. For example, the file inside
  // the src folder at `builtins/@graph/concat.js` will be identified as
  // `graphConcat`.

  // Drop the first part of the path.
  let parts = container.split("/");
  parts.shift();

  // The file name is the last part of the path; remove the .js extension.
  let name = key.slice(0, -3);

  // Ignore certain builtins like `@true` and `@false` that would conflict with
  // JavaScript keywords. Developers can use those JavaScript keywords directly.
  if (ignoredBuiltins[name]) {
    return "";
  }

  // Add the name to the parts.
  parts.push(name);

  // Remove the @ prefix from any parts, if present.
  parts = parts.map((part) => (part.startsWith("@") ? part.slice(1) : part));

  // Join the parts in camelCase to form the identifier.
  const identifier = parts
    .map((part, index) =>
      index === 0 ? part : part[0].toUpperCase() + part.slice(1)
    )
    .join("");

  return `export { default as ${identifier} } from "../src/${path}";\n`;
}

export function exportStatements(src) {
  // Add paths to the source tree so they can be used in the export statements.
  const withPaths = transformObject(PathTransform, src);

  // Map each source file to an export statement.
  const mapped = new MapExtensionGraph(withPaths, exportStatementForCode, {
    deep: true,
    extension: "js",
    extensionMatchesOnly: true,
  });

  return mapped;
}
